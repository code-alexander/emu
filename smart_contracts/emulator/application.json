{
    "hints": {
        "bootstrap(pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mine(uint64,byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZW11bGF0b3IuY29udHJhY3QuRW11bGF0b3IuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lbXVsYXRvci9jb250cmFjdC5weToxMjIKICAgIC8vIGNsYXNzIEVtdWxhdG9yKEFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 4,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "asa": {
                    "type": "uint64",
                    "key": "asa"
                },
                "block_hash": {
                    "type": "bytes",
                    "key": "block_hash"
                },
                "block_height": {
                    "type": "uint64",
                    "key": "block_height"
                },
                "coinbase": {
                    "type": "bytes",
                    "key": "coinbase"
                },
                "creator": {
                    "type": "bytes",
                    "key": "creator"
                },
                "prev_retarget_time": {
                    "type": "uint64",
                    "key": "prev_retarget_time"
                },
                "target": {
                    "type": "bytes",
                    "key": "target"
                },
                "time": {
                    "type": "uint64",
                    "key": "time"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Emulator",
        "methods": [
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "pay",
                        "name": "seed",
                        "desc": "Initial payment transaction to the app account."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The ID of the asset created."
                },
                "desc": "Bootstrap the application.\nThis method is idempotent. It creates the asset and opts the contract account into the asset."
            },
            {
                "name": "mine",
                "args": [
                    {
                        "type": "uint64",
                        "name": "nonce",
                        "desc": "The nonce."
                    },
                    {
                        "type": "byte[]",
                        "name": "coinbase",
                        "desc": "The coinbase."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The amount rewarded to the miner."
                },
                "desc": "Mine a block."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}